responses <- data[[4]]
# 2. fit models
gaus_output <- Run_Gaussian_Mod(data_list)
gaus_samples <- gaus_output[["samples"]]
logis_output <- Run_Logistic_Mod(data_list)
logis_samples <- logis_output[["samples"]]
# 4. posterior predictives
Gaus_Post_Preds <- Posterior_Preds(samples = gaus_samples, responses = responses,
modelName = "Gaussian", nSubj = n_subj, nStim = n_stim)
Logis_Post_Preds <- Posterior_Preds(samples = logis_samples, responses = responses,
modelName = "Logistic", nSubj = n_subj, nStim = n_stim)
# 3. model comparison
out_list <- list(gaus_output, logis_output)
names(out_list) <- c("gaussian", "logistic")
Model_Comps(models = out_list)
gaus_output$waic
logis_output$waic
simulate_data <- Simulate_Data(M = .1, SD = .2, simHeight = 75,
loc = -.1, scale = 40, relHeight = 90,
noise = 3, nSubj = 10)
toy_data <- simulate_data$data
toy_data_1 <- subset(toy_data, group == 1)
write.csv(toy_data_1, file = paste0("data/","toydata_1.csv"), row.names = FALSE)
toy_data_2 <- subset(toy_data, group == 2)
write.csv(toy_data_2, file = paste0("data/","toydata_2.csv"), row.names = FALSE)
# 1. read data from group 1
group1 <- Read_Demo(fileName = paste0("data/","toydata_1.csv"), dimVals = seq(-.5, +.5, .1))
data_list_1 <- group1[[1]]
compare(gaus_output$waic, logis_output$waic)
loo::compare(gaus_output$waic, logis_output$waic)
# read data from group 2
group2 <- Read_Demo(fileName = paste0("data/","toydata_2.csv"), dimVals = seq(-.5, +.5, .1))
data_list_2 <- group2[[1]]
# group 2
gaus_output_2 <- Run_Gaussian_Mod(data_list_2)
gaus_samples_2 <- gaus_output[["samples"]]
logis_output_2 <- Run_Logistic_Mod(data_list_2)
logis_samples_2 <- logis_output[["samples"]]
loo::compare(gaus_output_2$waic, logis_output_2$waic)
gaus_output_2$waic
logis_output_2$waic
# 4. posterior predictives
Gaus_Post_Preds <- Posterior_Preds(samples = gaus_samples, responses = responses,
modelName = "Gaussian", nSubj = n_subj, nStim = n_stim)
Logis_Post_Preds <- Posterior_Preds(samples = logis_samples, responses = responses,
modelName = "Logistic", nSubj = n_subj, nStim = n_stim)
n_subj_1 <- group1[[2]]
n_stim_1 <- group1[[3]]
responses_1 <- group1[[4]]
n_subj_2 <- group2[[2]]
n_stim_2 <- group2[[3]]
responses_2 <- group2[[4]]
# 4. posterior predictives
Gaus_Post_Preds <- Posterior_Preds(samples = gaus_samples_2, responses = responses_2,
modelName = "Gaussian-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
Logis_Post_Preds <- Posterior_Preds(samples = logis_samples_2, responses = responses_2,
modelName = "Logistic-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
n_subj_2
n_subj_2
n_stim_2
gaus_samples_2$M
simulate_data <- Simulate_Data(M = .1, SD = .2, simHeight = 75,
loc = -.1, scale = 40, relHeight = 90,
noise = 3, nSubj = 10)
toy_data <- simulate_data$data
toy_data_1 <- subset(toy_data, group == 1)
write.csv(toy_data_1, file = paste0("data/","toydata_1.csv"), row.names = FALSE)
toy_data_2 <- subset(toy_data, group == 2)
write.csv(toy_data_2, file = paste0("data/","toydata_2.csv"), row.names = FALSE)
# 1. read data from group 1
group1 <- Read_Demo(fileName = paste0("data/","toydata_1.csv"), dimVals = seq(-.5, +.5, .1))
data_list_1 <- group1[[1]]
n_subj_1 <- group1[[2]]
n_stim_1 <- group1[[3]]
responses_1 <- group1[[4]]
# read data from group 2
group2 <- Read_Demo(fileName = paste0("data/","toydata_2.csv"), dimVals = seq(-.5, +.5, .1))
data_list_2 <- group2[[1]]
n_subj_2 <- group2[[2]]
n_stim_2 <- group2[[3]]
responses_2 <- group2[[4]]
# 4. posterior predictives
Gaus_Post_Preds <- Posterior_Preds(samples = gaus_samples_2, responses = responses_2,
modelName = "Gaussian-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
Logis_Post_Preds <- Posterior_Preds(samples = logis_samples_2, responses = responses_2,
modelName = "Logistic-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
nSubj=n_subj_2
nStim=11
responses=responses_2
post_preds <- matrix(NA, nrow = nSubj*nStim*n_samp, ncol = 4)
post_preds <- as.data.frame(post_preds)
colnames(post_preds) <- c("subj", "dim", "samp", "pred")
post_preds$subj <- rep(1:nSubj, each = n_samp*nStim)
post_preds$dim <- rep(rep(1:nStim, each = n_samp), times = nSubj)
post_preds$samp <- rep(1:n_samp, times = nSubj*nStim)
samples = gaus_samples_2
for (subj in 1:nSubj) {
for (dim in 1:nStim) {
temp <- sample(samples$predR[, subj, dim], size = n_samp)
for (samp in 1:n_samp) {
start <- (subj-1) * nStim * n_samp+(dim-1) * n_samp + 1
end <- (subj-1) * nStim * n_samp + (dim-1) * n_samp + n_samp
post_preds$pred[start:end] <- temp
}
}
}
subj
dim
gaus_output_2 <- Run_Gaussian_Mod(data_list_2)
gaus_samples_2 <- gaus_output[["samples"]]
logis_output_2 <- Run_Logistic_Mod(data_list_2)
logis_samples_2 <- logis_output[["samples"]]
loo::compare(gaus_output_2$waic, logis_output_2$waic)
# 4. posterior predictives
Gaus_Post_Preds <- Posterior_Preds(samples = gaus_samples_2, responses = responses_2,
modelName = "Gaussian-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
gaus_samples_2$M
gaus_samples_1 <- gaus_output_1[["samples"]]
logis_samples_1 <- logis_output_1[["samples"]]
gaus_samples_2 <- gaus_output_2[["samples"]]
logis_samples_2 <- logis_output_2[["samples"]]
Gaus_Post_Preds <- Posterior_Preds(samples = gaus_samples_2, responses = responses_2,
modelName = "Gaussian-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
Logis_Post_Preds <- Posterior_Preds(samples = logis_samples_2, responses = responses_2,
modelName = "Logistic-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
logis_samples_2$M
logis_samples_2$loc
samples = logis_samples_2
nSubj = n_subj_2
post_preds <- matrix(NA, nrow = nSubj*nStim*n_samp, ncol = 4)
post_preds <- as.data.frame(post_preds)
colnames(post_preds) <- c("subj", "dim", "samp", "pred")
post_preds$subj <- rep(1:nSubj, each = n_samp*nStim)
post_preds$dim <- rep(rep(1:nStim, each = n_samp), times = nSubj)
post_preds$samp <- rep(1:n_samp, times = nSubj*nStim)
for (subj in 1:nSubj) {
for (dim in 1:nStim) {
temp <- sample(samples$predR[, subj, dim], size = n_samp)
for (samp in 1:n_samp) {
start <- (subj-1) * nStim * n_samp+(dim-1) * n_samp + 1
end <- (subj-1) * nStim * n_samp + (dim-1) * n_samp + n_samp
post_preds$pred[start:end] <- temp
}
}
}
# add responses
post_preds$response <- NA
post_preds$response <- rep(responses, each = n_samp)
View(post_preds)
# plot empirical gradients with posterior samples overlayed
grad_layers <- list(
geom_line(stat = "identity", size = 1.5),
labs(title = "", x = "dimension", y = "outcome likelihood"),
scale_colour_manual(values = fig_cols),
geom_vline(xintercept = 6, linetype = "dotted", colour = "black"), # 0
geom_vline(xintercept = 4, linetype = "dotted", colour = "black"), # -2
scale_x_continuous(breaks = 1:nStim, limits = c(1,nStim),# -5:5,
labels = c("S1",rep("",2),"CS-","","CS+",rep("",4),"S11")),
scale_y_continuous(breaks = seq(from = 0, to = 100, by = 20), expand = c(.025,0), limits = c(0,120)),
theme_classic(),
theme(panel.background = element_rect(colour = "black", size = 0.5, linetype = "solid", fill = NA),
axis.line.x = element_line(colour="black", size=0.5, linetype="solid"),
axis.line.y = element_line(colour="black", size=0.5, linetype="solid"),
legend.position="none")
)
ggplot(post_preds, aes(y = response, x = dim)) +
grad_layers +
geom_point(aes(y = pred, x = dim), colour = scat_col, size = scat_size,
shape = scat_shape)
simulate_data <- Simulate_Data(M = .1, SD = .2, simHeight = 75,
loc = -.1, scale = 40, relHeight = 90,
noise = 5, nSubj = 10)
toy_data <- simulate_data$data
toy_data_1 <- subset(toy_data, group == 1)
write.csv(toy_data_1, file = paste0("data/","toydata_1.csv"), row.names = FALSE)
toy_data_2 <- subset(toy_data, group == 2)
write.csv(toy_data_2, file = paste0("data/","toydata_2.csv"), row.names = FALSE)
# 1. read data from group 1
group1 <- Read_Demo(fileName = paste0("data/","toydata_1.csv"), dimVals = seq(-.5, +.5, .1))
data_list_1 <- group1[[1]]
n_subj_1 <- group1[[2]]
n_stim_1 <- group1[[3]]
responses_1 <- group1[[4]]
# read data from group 2
group2 <- Read_Demo(fileName = paste0("data/","toydata_2.csv"), dimVals = seq(-.5, +.5, .1))
data_list_2 <- group2[[1]]
n_subj_2 <- group2[[2]]
n_stim_2 <- group2[[3]]
responses_2 <- group2[[4]]
# 2. fit models
# group 1
gaus_output_1 <- Run_Gaussian_Mod(data_list_1)
gaus_samples_1 <- gaus_output_1[["samples"]]
logis_output_1 <- Run_Logistic_Mod(data_list_1)
logis_samples_1 <- logis_output_1[["samples"]]
# group 2
gaus_output_2 <- Run_Gaussian_Mod(data_list_2)
gaus_samples_2 <- gaus_output_2[["samples"]]
logis_output_2 <- Run_Logistic_Mod(data_list_2)
logis_samples_2 <- logis_output_2[["samples"]]
# 4. posterior predictives
Gaus_Post_Preds <- Posterior_Preds(samples = gaus_samples_2, responses = responses_2,
modelName = "Gaussian-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
Logis_Post_Preds <- Posterior_Preds(samples = logis_samples_2, responses = responses_2,
modelName = "Logistic-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
#-------------------------------------------------------------------------------
#                     FITTING GENERALIZATION GRADIENTS
#-------------------------------------------------------------------------------
# Jessica Lee 2019
seed_num <- 1000
set.seed(seed_num)
mc.cores = parallel::detectCores()
file_name_root <- "output/"
# load packages
library(tidyverse)
library(rstan)
library(bridgesampling)
# mcmc parameters
n_chains <- 4
n_iter <- 10000 # 50000 for logis JEPLMC, 20000 otherwise
n_burnin <- 1000
n_thin <- 1
n_samp <- 100
# figures
graph_file_type = ".jpeg"
fig_cols <- c("black", "red")
scat_shape <- 16
scat_size <- 1
scat_col <- alpha(fig_cols[2], .2)
gg_height <- 10
gg_width <- 10
n_row <- 3
# source
source("R/functions.R")
source("models/models.R")
simulate_data <- Simulate_Data(M = .1, SD = .2, simHeight = 75,
loc = -.1, scale = 40, relHeight = 90,
noise = 5, nSubj = 10)
toy_data <- simulate_data$data
toy_data_1 <- subset(toy_data, group == 1)
write.csv(toy_data_1, file = paste0("data/","toydata_1.csv"), row.names = FALSE)
toy_data_2 <- subset(toy_data, group == 2)
write.csv(toy_data_2, file = paste0("data/","toydata_2.csv"), row.names = FALSE)
# 1. read data from group 1
group1 <- Read_Demo(fileName = paste0("data/","toydata_1.csv"), dimVals = seq(-.5, +.5, .1))
data_list_1 <- group1[[1]]
n_subj_1 <- group1[[2]]
n_stim_1 <- group1[[3]]
responses_1 <- group1[[4]]
# read data from group 2
group2 <- Read_Demo(fileName = paste0("data/","toydata_2.csv"), dimVals = seq(-.5, +.5, .1))
data_list_2 <- group2[[1]]
n_subj_2 <- group2[[2]]
n_stim_2 <- group2[[3]]
responses_2 <- group2[[4]]
# mcmc parameters
n_chains <- 2
n_iter <- 10000 # 50000 for logis JEPLMC, 20000 otherwise
gaus_output_1 <- Run_Gaussian_Mod(data_list_1)
gaus_samples_1 <- gaus_output_1[["samples"]]
logis_output_1 <- Run_Logistic_Mod(data_list_1)
logis_samples_1 <- logis_output_1[["samples"]]
# group 2
gaus_output_2 <- Run_Gaussian_Mod(data_list_2)
gaus_samples_2 <- gaus_output_2[["samples"]]
logis_output_2 <- Run_Logistic_Mod(data_list_2)
logis_samples_2 <- logis_output_2[["samples"]]
# 3. model comparison
out_list_1 <- list(gaus_output_1, logis_output_1)
names(out_list_1) <- c("gaussian", "logistic")
Model_Comps(models = out_list_1)
# 4. posterior predictives
Gaus_Post_Preds <- Posterior_Preds(samples = gaus_samples_1, responses = responses_1,
modelName = "Gaussian-Simulated1", nSubj = n_subj_1, nStim = n_stim_1)
Logis_Post_Preds <- Posterior_Preds(samples = logis_samples_1, responses = responses_1,
modelName = "Logistic-Simulated1", nSubj = n_subj_1, nStim = n_stim_1)
Gaus_Post_Preds <- Posterior_Preds(samples = gaus_samples_2, responses = responses_2,
modelName = "Gaussian-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
Logis_Post_Preds <- Posterior_Preds(samples = logis_samples_2, responses = responses_2,
modelName = "Logistic-Simulated2", nSubj = n_subj_2, nStim = n_stim_2)
gaus_output_1$waic
Model_Comps <- function(models) {
# This function takes as input a list of model output and omputes Widely
# Applicable Information Criterions and marginal likelihoods for each model
# and saves the output to file.
bridge <- list()
waics <- list()
for (i in 1:length(models)) {
# bridge[i] <- list(models[[i]][["bridge"]])
waics[i] <- models[[i]][["waic"]]# [["estimates"]][3,1]
}
BFs <- matrix(NA, nrow = length(models), ncol = length(models))
rownames(BFs) <- colnames(BFs) <- names(models)
# for (row in 1:length(models)) {
#   for (col in 1:length(models)) {
#     BFs[row, col] <- bf(bridge[[row]], bridge[[col]])[["bf"]]
#   }
# }
waics <- data.frame(t(c(unlist(waics))))
colnames(waics) <- names(models)
write.csv(waics, file = paste0(file_name_root, "WAICs", ".csv"), row.names = FALSE)
write.csv(BFs, file = paste0(file_name_root, "BFs", ".csv"))
return(list(waics, BFs))
}
# 3. model comparison
out_list_1 <- list(gaus_output_1, logis_output_1)
names(out_list_1) <- c("gaussian", "logistic")
Model_Comps(models = out_list_1)
gaus_output_1$waic
logis_output_1$waic
logis_output_2$waic
gaus_output_2$waic
hist(gaus_samples_1$M, breaks = 1000)
hist(gaus_samples_2$M, breaks = 1000)
hist(gaus_samples_1$M, breaks = 1000)
abline(v = mean(gaus_samples_1$M), col = "red", lwd = 3)
gaus_output_1$waic
logis_output_1$waic
gaus_output_2$waic
logis_output_2$waic
summary <- rstan::summary(gaus_output_1$stanfit, probs = c(0.025, 0.50, 0.975))$summary
write.csv(summary, file = paste0(file_name_root, "gaus1-summary.csv"), row.names = TRUE)
summary <- rstan::summary(logis_output_1$stanfit, probs = c(0.025, 0.50, 0.975))$summary
write.csv(summary, file = paste0(file_name_root, "logis1-summary.csv"), row.names = TRUE)
?bf
bf(1, .5)
log(1)
log(10)
bf(2.302585, 0)
#-------------------------------------------------------------------------------
#                     FITTING GENERALIZATION GRADIENTS
#-------------------------------------------------------------------------------
# Jessica Lee 2019
seed_num <- 1000
set.seed(seed_num)
mc.cores = parallel::detectCores()
file_name_root <- "output/"
# load packages
library(tidyverse)
library(gridExtra)
library(rstan)
# mcmc parameters
n_chains <- 4
n_iter <- 10000
n_burnin <- 1000
n_thin <- 1
n_samp <- 100
# figures
graph_file_type = ".jpeg"
fig_cols <- c("black", "red")
scat_shape <- 16
scat_size <- 1
scat_col <- alpha(fig_cols[2], .1)
gg_height <- 10
gg_width <- 10
dpi = 600
n_row <- 5
dim_vals <- seq(-.5, +.5, .1)
# source
source("R/functions.R")
source("models/models.R")
# ------------------------------ SIMULATED DATA --------------------------------
simulate <- Simulate_Data(M = rep(c(-.2, -.1, 0, .1, .2), times = 5),
SD = rep(c(.1, .15, .2, .3, .5), each = 5),
simHeight = rep(75, 25), dimVals = dim_vals,
noise = 7.5, nSubj = 25)
simulate$fig
demo_data <- simulate$data
write.csv(demo_data, file = paste0("data/","demo_data.csv"), row.names = FALSE)
# 1. read data
demo <- Read_Demo(fileName = paste0("data/","demo_data.csv"), dimVals = seq(-.5, +.5, .1))
data_list <- demo[[1]]
# 2. fit models
demo_output <- Run_Gaussian_Mod(data_list, modelName = "demo")
demo_samples <- demo_output[["samples"]]
# 3. posterior predictives
Gaus_Post_Preds <- Posterior_Preds(samples = demo_samples, responses = demo[[4]],
modelName = "demo", nSubj = demo[[2]],
nStim = demo[[3]], summary = as.data.frame(demo_output$summary))
mean_line_cols <- c("red", "blue")
density_cols <- c("red", "blue")
source('/Volumes/JessUSB/projects/2017-gen_analysis/code/curve_fitting/code/R/functions.R', echo=TRUE)
# 1. read data
data <- Read_Subgroups(fileName = "data/NSW02-Data.csv", dimVals = dim_vals)
data_list_sim <- data[[1]]
data_list_lin <- data[[5]]
# 2. fit models for similarity and linear subgroup
sim_output <- Run_Gaussian_Mod(data_list_sim, modelName = "sim")
sim_samples <- sim_output[["samples"]]
lin_output <- Run_Gaussian_Mod(data_list_lin, modelName = "lin")
lin_samples <- lin_output[["samples"]]
# 3. posterior predictives
Posterior_Preds(samples = sim_samples, responses = data[[4]], modelName = "sim",
nSubj = data[[2]], nStim = data[[3]], summary = as.data.frame(sim_output$summary))
Posterior_Preds(samples = lin_samples, responses = data[[8]], modelName = "lin",
nSubj = data[[6]], nStim = data[[3]], summary = as.data.frame(lin_output$summary))
# 4. compare estimates between groups
Compare_Subgroups(sim_samples, lin_samples, "similarity", "linear")
Compare_Subgroups <- function(samples1, samples2, groupName1, groupName2) {
estimates <- as.data.frame(cbind(c(as.vector(samples1$M), as.vector(samples2$M)),
c(as.vector(samples1$SD), as.vector(samples2$SD)),
c(as.vector(samples1$height), as.vector(samples2$height))))
colnames(estimates) <- c("M", "SD", "height")
estimates$group <- c(rep(groupName1, length(as.vector(sim_samples$M))),
rep(groupName2, length(as.vector(lin_samples$M))))
density_layers <- list(geom_density(alpha = .5, show.legend = FALSE),
scale_fill_manual(values = density_cols),
theme_classic())
M_fig <- ggplot(estimates, aes(M, fill = group)) +
density_layers +
geom_vline(xintercept = mean(samples1$M), linetype = "solid", colour = density_cols[1]) +
geom_vline(xintercept = mean(samples2$M), linetype = "solid", colour = density_cols[2]) +
ggtitle("a) Mean")
SD_fig <- ggplot(estimates, aes(SD, fill = group)) +
density_layers +
geom_vline(xintercept = mean(samples1$SD), linetype = "solid", colour = density_cols[1]) +
geom_vline(xintercept = mean(samples2$SD), linetype = "solid", colour = density_cols[2]) +
ggtitle("b) Width")
height_fig <- ggplot(estimates, aes(height, fill = group)) +
density_layers +
geom_vline(xintercept = mean(samples1$height), linetype = "solid", colour = density_cols[1]) +
geom_vline(xintercept = mean(samples2$height), linetype = "solid", colour = density_cols[2]) +
ggtitle("c) Height")
fig_panel <- grid.arrange(M_fig + theme(legend.title = element_blank()),
SD_fig + theme(legend.title = element_blank()),
height_fig, nrow = 1)
ggsave(paste0(file_name_root, "density", graph_file_type), fig_panel,
"jpeg", height = gg_height, width = gg_width*3, units = "cm", dpi = dpi)
}
# 4. compare estimates between groups
Compare_Subgroups(sim_samples, lin_samples, "similarity", "linear")
Compare_Subgroups <- function(samples1, samples2, groupName1, groupName2) {
estimates <- as.data.frame(cbind(c(as.vector(samples1$M), as.vector(samples2$M)),
c(as.vector(samples1$SD), as.vector(samples2$SD)),
c(as.vector(samples1$height), as.vector(samples2$height))))
colnames(estimates) <- c("M", "SD", "height")
estimates$group <- c(rep(groupName1, length(as.vector(sim_samples$M))),
rep(groupName2, length(as.vector(lin_samples$M))))
density_layers <- list(geom_density(alpha = .25, show.legend = FALSE),
scale_fill_manual(values = density_cols),
theme_classic())
M_fig <- ggplot(estimates, aes(M, fill = group)) +
density_layers +
geom_vline(xintercept = mean(samples1$M), linetype = "solid", colour = density_cols[1]) +
geom_vline(xintercept = mean(samples2$M), linetype = "solid", colour = density_cols[2]) +
ggtitle("a) Mean")
SD_fig <- ggplot(estimates, aes(SD, fill = group)) +
density_layers +
geom_vline(xintercept = mean(samples1$SD), linetype = "solid", colour = density_cols[1]) +
geom_vline(xintercept = mean(samples2$SD), linetype = "solid", colour = density_cols[2]) +
ggtitle("b) Width")
height_fig <- ggplot(estimates, aes(height, fill = group)) +
density_layers +
geom_vline(xintercept = mean(samples1$height), linetype = "solid", colour = density_cols[1]) +
geom_vline(xintercept = mean(samples2$height), linetype = "solid", colour = density_cols[2]) +
ggtitle("c) Height") +
theme(legend.position="right")
fig_panel <- grid.arrange(M_fig + theme(legend.title = element_blank()),
SD_fig + theme(legend.title = element_blank()),
height_fig, nrow = 1)
ggsave(paste0(file_name_root, "density", graph_file_type), fig_panel,
"jpeg", height = gg_height, width = gg_width*3, units = "cm", dpi = dpi)
}
# 4. compare estimates between groups
Compare_Subgroups(sim_samples, lin_samples, "similarity", "linear")
Compare_Subgroups <- function(samples1, samples2, groupName1, groupName2) {
estimates <- as.data.frame(cbind(c(as.vector(samples1$M), as.vector(samples2$M)),
c(as.vector(samples1$SD), as.vector(samples2$SD)),
c(as.vector(samples1$height), as.vector(samples2$height))))
colnames(estimates) <- c("M", "SD", "height")
estimates$group <- c(rep(groupName1, length(as.vector(sim_samples$M))),
rep(groupName2, length(as.vector(lin_samples$M))))
density_layers <- list(geom_density(alpha = .25),
scale_fill_manual(values = density_cols),
theme_classic())
M_fig <- ggplot(estimates, aes(M, fill = group)) +
density_layers +
guides(fill = FALSE) +
geom_vline(xintercept = mean(samples1$M), linetype = "solid", colour = density_cols[1],
size = 2) +
geom_vline(xintercept = mean(samples2$M), linetype = "solid", colour = density_cols[2],
size = 2) +
ggtitle("a) Mean")
SD_fig <- ggplot(estimates, aes(SD, fill = group)) +
density_layers +
guides(fill = FALSE) +
geom_vline(xintercept = mean(samples1$SD), linetype = "solid", colour = density_cols[1],
size = 2) +
geom_vline(xintercept = mean(samples2$SD), linetype = "solid", colour = density_cols[2],
size = 2) +
ggtitle("b) Width")
height_fig <- ggplot(estimates, aes(height, fill = group)) +
density_layers +
geom_vline(xintercept = mean(samples1$height), linetype = "solid", colour = density_cols[1],
size = 2) +
geom_vline(xintercept = mean(samples2$height), linetype = "solid", colour = density_cols[2],
size = 2) +
ggtitle("c) Height") +
theme(legend.position="right")
fig_panel <- grid.arrange(M_fig + theme(legend.title = element_blank()),
SD_fig + theme(legend.title = element_blank()),
height_fig, nrow = 1)
ggsave(paste0(file_name_root, "density", graph_file_type), fig_panel,
"jpeg", height = gg_height, width = gg_width*3, units = "cm", dpi = dpi)
}
# 4. compare estimates between groups
Compare_Subgroups(sim_samples, lin_samples, "similarity", "linear")
density_cols <- c("blue", "red") # linear, similarity
# 4. compare estimates between groups
Compare_Subgroups(sim_samples, lin_samples, "similarity", "linear")
# 4. compare estimates between groups
Compare_Subgroups(lin_samples, sim_samples, "linear", "similarity")
